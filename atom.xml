<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>叶刀刀的博客</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://blog.yedaodao.com/"/>
  <updated>2017-02-10T04:49:52.000Z</updated>
  <id>http://blog.yedaodao.com/</id>
  
  <author>
    <name>Yedaodao</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>理解数据结构-绪论</title>
    <link href="http://blog.yedaodao.com/data-structure/data-structure-introduction/"/>
    <id>http://blog.yedaodao.com/data-structure/data-structure-introduction/</id>
    <published>2017-02-10T04:44:49.000Z</published>
    <updated>2017-02-10T04:49:52.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="理解数据结构-绪论"><a href="#理解数据结构-绪论" class="headerlink" title="理解数据结构-绪论"></a>理解数据结构-绪论</h1><p>工作两年了，想从更多应用和数学的角度上来理解数据结构。</p>
<p>程序设计=数据结构+算法</p>
<h2 id="关键概念"><a href="#关键概念" class="headerlink" title="关键概念"></a>关键概念</h2><p>数据项：组成数据元素，是数据不可分割的最小单位</p>
<p>数据元素：组成数据的，有一定意义的基本单位</p>
<p>数据对象：性质相同的数据元素的集合</p>
<p>数据结构：相互之间存在一种或多种特定关系的数据元素的集合（研究数据的组成结构以及数据对象之间相互关系的一门学科）</p>
<p>数据：首先是用来描述客观事物的符号，并且是能被计算机识别并操作的对象，是符号集合。</p>
<h3 id="数据结构分类"><a href="#数据结构分类" class="headerlink" title="数据结构分类"></a>数据结构分类</h3><p>由于数据结构是研究数据对象之间的关系的，从视点不同，可以把这种关系分为逻辑结构和物理结构。</p>
<p>逻辑结构：</p>
<ul>
<li>集合结构</li>
<li>线性结构</li>
<li>树结构</li>
<li>图结构</li>
</ul>
<p>物理结构：</p>
<ul>
<li>顺序存储</li>
<li>链式存储</li>
</ul>
<h3 id="抽象数据类型"><a href="#抽象数据类型" class="headerlink" title="抽象数据类型"></a>抽象数据类型</h3><p>包括数据类型及一系列基于其上的操作</p>
<p>原子类型：不可再分解的基本类型，整型、字符型<br>结构类型；由若干个类型组成，可以再分解</p>
<h3 id="算法"><a href="#算法" class="headerlink" title="算法"></a>算法</h3><h4 id="算法的特性"><a href="#算法的特性" class="headerlink" title="算法的特性"></a>算法的特性</h4><ul>
<li>输入输出</li>
<li>有穷性</li>
<li>确定性</li>
<li>可行性</li>
</ul>
<h4 id="估算算法"><a href="#估算算法" class="headerlink" title="估算算法"></a>估算算法</h4><p>事前分析方法：</p>
<ul>
<li>算法采用的策略方法</li>
<li>编译产生的代码质量（软件支持）</li>
<li>问题的输入规模</li>
<li>机器执行指令的速度（硬件支持）</li>
</ul>
<p>可控：策略方法，<strong>输入规模（特别注意）</strong></p>
<h2 id="事前分析估算方法"><a href="#事前分析估算方法" class="headerlink" title="事前分析估算方法"></a>事前分析估算方法</h2><p>进行事前分析估算一般通过计算算法复杂度，算法复杂度包含<strong>时间复杂度</strong>和<strong>空间复杂度</strong>，这两者很难都做到极致，一般是在两者之间做出权衡，或者根据场景需求不同，来决定两者的优先级。</p>
<p>同时还要注意的是，一定要考虑问题的输入规模，如果将算法的执行操作次数用函数表达出来的话，我们是知道函数</p>
<h3 id="时间复杂度"><a href="#时间复杂度" class="headerlink" title="时间复杂度"></a>时间复杂度</h3><p>时间复杂度全称叫做渐近时间复杂度。</p>
<p>我们用T(n)表示关于问题规模n的关键语句执行次数的函数，但T(n)用精确的多项式来表示不易代表算法的效率。如T(n)=2n<sup>2</sup>+3n+1，但随着n值不断增大，我们会发现，函数中的3n+1的值在总的结果中占得比重越来越少，所以在n趋近于无穷大时，完全可以将函数中的次要项以及常数项忽略。这样我们可以得出结论，T(n)的数量级是由函数中最高项决定的。所以我们得出T(n)=O(f(n))。</p>
<p>其中f(n)表示，随着n增大，T(n)与f(n)的增长率相同，O(f(n))也就是算法的时间复杂度。</p>
<h4 id="常见O阶"><a href="#常见O阶" class="headerlink" title="常见O阶"></a>常见O阶</h4><ul>
<li>常数阶：无论n为多少，T(n)总是一个定值，记为O(1)</li>
<li>线型阶：记为O(n)</li>
<li>对数阶：记为O(logn)</li>
<li>平方阶：记为O(n<sup>2</sup>)</li>
</ul>
<h4 id="比较方法"><a href="#比较方法" class="headerlink" title="比较方法"></a>比较方法</h4><p>如何比较各个O阶的大小呢，这就要用到高等数学的知识了。</p>
<p>通过前面的概念我们知道，算法的时间复杂度实际上是要找到一个与T(n)函数增长率相同的，相对结构简单的函数f(n)表示，那么比较O阶的大小，就需要比较f(n)的增长速度。</p>
<p>证明不等式主要通过以下几种方法：</p>
<ul>
<li>两个函数式相减</li>
<li>两个函数式相除</li>
<li>函数单调性</li>
<li>求导</li>
</ul>
<p>对于幂函数，对数函数以及指数函数之间的比较，要多利用导数与单调性结合。</p>
<p>如O(2<sup>n</sup>)与O(n<sup>3</sup>)比较时间复杂度</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>学习一种数据结构，要从以下几个方面来彻底理解它：</p>
<ul>
<li>数学定义</li>
<li>抽象数据类型：该结构包含的数据类型，以及定义在其上的一系列操作</li>
<li>数据结构分类：逻辑结构和物理结构两个方面</li>
<li>基于该数据结构的算法操作及复杂度</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;理解数据结构-绪论&quot;&gt;&lt;a href=&quot;#理解数据结构-绪论&quot; class=&quot;headerlink&quot; title=&quot;理解数据结构-绪论&quot;&gt;&lt;/a&gt;理解数据结构-绪论&lt;/h1&gt;&lt;p&gt;工作两年了，想从更多应用和数学的角度上来理解数据结构。&lt;/p&gt;
&lt;p&gt;程序设计=数据
    
    </summary>
    
      <category term="data-structure" scheme="http://blog.yedaodao.com/categories/data-structure/"/>
    
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://blog.yedaodao.com/uncategorized/hello-world/"/>
    <id>http://blog.yedaodao.com/uncategorized/hello-world/</id>
    <published>2017-02-02T15:26:37.000Z</published>
    <updated>2017-02-02T15:26:37.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Hello-World"><a href="#Hello-World" class="headerlink" title="Hello World"></a>Hello World</h1><p>Keep Thinking</p>
<p>Keep Coding</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Hello-World&quot;&gt;&lt;a href=&quot;#Hello-World&quot; class=&quot;headerlink&quot; title=&quot;Hello World&quot;&gt;&lt;/a&gt;Hello World&lt;/h1&gt;&lt;p&gt;Keep Thinking&lt;/p&gt;
&lt;p&gt;Keep Coding&lt;/
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Javascript中的状态机</title>
    <link href="http://blog.yedaodao.com/concepts/state-machine-in-js/"/>
    <id>http://blog.yedaodao.com/concepts/state-machine-in-js/</id>
    <published>2017-02-02T15:14:45.000Z</published>
    <updated>2017-02-02T15:40:14.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Javascript中的状态机"><a href="#Javascript中的状态机" class="headerlink" title="Javascript中的状态机"></a>Javascript中的状态机</h1><p>状态机是在现代计算机领域运用极其广泛的一种编程模式。它将事物的变化抽象为离散有限个状态，并且认为事物产生变化是由于接收了事件，而事件的产生是由于事物此时已经满足了发生状态变化的条件。而状态机所管理的状态一定是有限个的，并且至少有一个状态为终态的，当状态机的当前状态为终态时，该状态机停止运行。</p>
<p>状态机分为两种类型：</p>
<ul>
<li>Moore状态机：输出与输入无关，只与状态有关。</li>
<li>Mealy状态机：输出与输入及状态均有关。</li>
</ul>
<h2 id="状态机组成"><a href="#状态机组成" class="headerlink" title="状态机组成"></a>状态机组成</h2><p>在笔者看来由高级语言实现的状态机包含以下几个概念：</p>
<ul>
<li>State：对象在其生命周期中所处的阶段，由对象此时满足的条件所决定。</li>
<li>Action：条件满足后，对象需要执行的任务。但Action不是必须的，可以在执行动作后迁移到新状态，也可不执行任何任务，直接迁移状态。</li>
<li>Transition：定义状态迁移的条件。</li>
<li>Guards：用于检测是否满足状态迁移的条件。</li>
<li>Event：引起状态迁移的原因。</li>
</ul>
<p>初步概括状态机的执行流程如下：</p>
<img src="/concepts/state-machine-in-js/state-machine-flow.jpg" alt="state-machine-flow.jpg" title="">
<h2 id="状态机实现"><a href="#状态机实现" class="headerlink" title="状态机实现"></a>状态机实现</h2><p>笔者在这里使用Nodejs编写，我们需要一个Factory创建状态机，实现代码如下：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> _ = <span class="built_in">require</span>(<span class="string">'lodash'</span>);</div><div class="line"></div><div class="line"><span class="keyword">var</span> StateMachineFactory = (<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> exports = &#123;</div><div class="line">        <span class="attr">create</span>: create</div><div class="line">    &#125;;</div><div class="line"></div><div class="line">    <span class="comment">// 状态机类</span></div><div class="line">    <span class="keyword">var</span> StateMachine = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="keyword">this</span>.states = &#123;&#125;;</div><div class="line">        <span class="keyword">this</span>.transitions = &#123;&#125;;</div><div class="line">        <span class="keyword">this</span>.currentState = <span class="string">''</span>;</div><div class="line">        <span class="keyword">this</span>.allowEvents = [];</div><div class="line">    &#125;;</div><div class="line"></div><div class="line">    <span class="comment">// 激活事件，触发状态迁移</span></div><div class="line">    StateMachine.prototype.emit = <span class="function"><span class="keyword">function</span> (<span class="params">evt</span>) </span>&#123;</div><div class="line">        <span class="keyword">var</span> self = <span class="keyword">this</span>,</div><div class="line">            transition = <span class="keyword">this</span>.transitions[evt];</div><div class="line">        <span class="keyword">if</span> (!transition || <span class="keyword">this</span>.currentState !== transition.from) &#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">this</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> (_.isFunction(transition.action)) &#123;</div><div class="line">            <span class="comment">// 传入异步回调函数，完成Action后调用该函数设置状态</span></div><div class="line">            transition.action.call(<span class="keyword">this</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">                self.currentState = transition.to;</div><div class="line">            &#125;);</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            <span class="keyword">this</span>.currentState = transition.to;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</div><div class="line">    &#125;;</div><div class="line"></div><div class="line">    <span class="comment">// 创建状态机实例</span></div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">create</span>(<span class="params">specObj</span>) </span>&#123;</div><div class="line">        <span class="keyword">if</span> (!_.isPlainObject(specObj)) &#123;</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'First arg must be a plain obj'</span>);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">var</span> sm = <span class="keyword">new</span> StateMachine();</div><div class="line">        sm.currentState = specObj.initial;</div><div class="line">        <span class="keyword">if</span> (!specObj.states || !<span class="built_in">Object</span>.keys(specObj.states).length) &#123;</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'The state property is unset'</span>);</div><div class="line">        &#125;</div><div class="line">        sm.states = specObj.states;</div><div class="line">        <span class="comment">// 确保transition正确性</span></div><div class="line">        _.forEach(specObj.transitions, <span class="function"><span class="keyword">function</span> (<span class="params">val, key</span>) </span>&#123;</div><div class="line">            <span class="keyword">if</span> ((sm.states[val.from]) &amp;&amp; (sm.states[val.to])) &#123;</div><div class="line">                sm.allowEvents.push(key);</div><div class="line">                val.action = sm.states[val.to];</div><div class="line">                sm.transitions[key] = val;</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">        <span class="keyword">return</span> sm;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> exports;</div><div class="line">&#125;());</div><div class="line"></div><div class="line"><span class="keyword">var</span> state = StateMachineFactory.create(&#123;</div><div class="line">    <span class="attr">initial</span>: <span class="string">'stateA'</span>,</div><div class="line">    <span class="attr">states</span>: &#123;</div><div class="line">        <span class="string">'stateA'</span>: <span class="function"><span class="keyword">function</span> (<span class="params">next</span>) </span>&#123;</div><div class="line">            <span class="built_in">console</span>.log(<span class="string">'to stateA'</span>);</div><div class="line">            next();</div><div class="line">        &#125;,</div><div class="line">        <span class="string">'stateB'</span>: <span class="function"><span class="keyword">function</span> (<span class="params">next</span>) </span>&#123;</div><div class="line">            <span class="built_in">console</span>.log(<span class="string">'to stateB'</span>);</div><div class="line">            next();</div><div class="line">        &#125;,</div><div class="line">        <span class="string">'stateC'</span>: <span class="function"><span class="keyword">function</span> (<span class="params">next</span>) </span>&#123;</div><div class="line">            <span class="built_in">console</span>.log(<span class="string">'to stateC'</span>);</div><div class="line">            next();</div><div class="line">        &#125;</div><div class="line">    &#125;,</div><div class="line">    <span class="attr">transitions</span>: &#123;</div><div class="line">        <span class="string">'A'</span>: &#123;<span class="attr">from</span>: <span class="string">'stateC'</span>, <span class="attr">to</span>: <span class="string">'stateA'</span>&#125;,</div><div class="line">        <span class="string">'B'</span>: &#123;<span class="attr">from</span>: <span class="string">'stateA'</span>, <span class="attr">to</span>: <span class="string">'stateB'</span>&#125;,</div><div class="line">        <span class="string">'C'</span>: &#123;<span class="attr">from</span>: <span class="string">'stateB'</span>, <span class="attr">to</span>: <span class="string">'stateC'</span>&#125;</div><div class="line">    &#125;</div><div class="line">&#125;);</div><div class="line"></div><div class="line">state.emit(<span class="string">'B'</span>);</div><div class="line"><span class="built_in">console</span>.log(state.currentState);</div><div class="line">state.emit(<span class="string">'C'</span>);</div><div class="line"><span class="built_in">console</span>.log(state.currentState);</div><div class="line">state.emit(<span class="string">'A'</span>);</div><div class="line"><span class="built_in">console</span>.log(state.currentState);</div></pre></td></tr></table></figure>
<p>这就是一个简单的状态机雏形了，我们可以定义状态，定义状态迁移的条件和规则，通过状态机，我们可以将多变复杂的UI逻辑整理清楚，归类放置。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Javascript中的状态机&quot;&gt;&lt;a href=&quot;#Javascript中的状态机&quot; class=&quot;headerlink&quot; title=&quot;Javascript中的状态机&quot;&gt;&lt;/a&gt;Javascript中的状态机&lt;/h1&gt;&lt;p&gt;状态机是在现代计算机领域运用极其广泛
    
    </summary>
    
      <category term="concepts" scheme="http://blog.yedaodao.com/categories/concepts/"/>
    
    
  </entry>
  
</feed>
